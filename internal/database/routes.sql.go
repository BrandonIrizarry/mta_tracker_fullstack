// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: routes.sql

package database

import (
	"context"
)

const addRoute = `-- name: AddRoute :exec
INSERT INTO routes (
       id, long_name, short_name, description, select_bus_service
) VALUES (
  ?, ?, ?, ?, ?
)
`

type AddRouteParams struct {
	ID               string
	LongName         string
	ShortName        string
	Description      string
	SelectBusService bool
}

func (q *Queries) AddRoute(ctx context.Context, arg AddRouteParams) error {
	_, err := q.db.ExecContext(ctx, addRoute,
		arg.ID,
		arg.LongName,
		arg.ShortName,
		arg.Description,
		arg.SelectBusService,
	)
	return err
}

const getAllRoutes = `-- name: GetAllRoutes :many
SELECT id, long_name, short_name, description, select_bus_service FROM routes
`

func (q *Queries) GetAllRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.ID,
			&i.LongName,
			&i.ShortName,
			&i.Description,
			&i.SelectBusService,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testRouteTablePopulated = `-- name: TestRouteTablePopulated :one
SELECT EXISTS (
       SELECT 1 FROM routes
)
`

func (q *Queries) TestRouteTablePopulated(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, testRouteTablePopulated)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
